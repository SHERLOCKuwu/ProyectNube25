name: CI/CD Miel Dorada

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  PORT: 3001 

jobs:
  test-and-build:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18.x'
          cache: 'npm'

      - name: Install dependencies
        run: npm install

      - name: Run Backend Tests
        env:
          DB_URL: ${{ secrets.DB_URL }}           # Usa tu secret de MongoDB Atlas
          SECRET_KEY: ${{ secrets.SECRET_KEY }}   # Usa tu secret para JWT
        run: |
          if [ -f "Backend/test/*.test.js" ]; then
            npm test
          else
            echo "‚ö†Ô∏è No hay tests - Continuando..."
          fi

      - name: Prepare Frontend
        run: |
          cd Frontend
          echo "üìÅ Estructura actual:"
          ls -R
          
          # Crea directorio dist si no existe
          mkdir -p dist
          
          # Copia archivos HTML (si est√°n en paginas/)
          if [ -d "paginas" ]; then
            cp -r paginas/*.html dist/
          else
            cp -r *.html dist/ || echo "‚ö†Ô∏è No hay HTML en ra√≠z"
          fi
          
          # Copia assets (usa el nombre correcto de tus carpetas)
          for folder in estilos css js imagenes; do
            if [ -d "$folder" ]; then
              cp -r "$folder" dist/
            fi
          done
          
          echo "‚úÖ Frontend preparado en /dist"
          ls -R dist

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: production-files
          path: |
            Backend/
            Frontend/dist/
            package.json

      - name: Deploy to Railway
        if: github.ref == 'refs/heads/main'
        uses: railwayapp/action@v1.0.0
        with: 
          service: backend  # Nombre de tu servicio en Railway
          token: ${{ secrets.RAILWAY_TOKEN }}
          environment: production
          command: npm start

      - name: Send Email Notification
        if: always() # Se ejecuta siempre, incluso si falla
        run: |
          curl -X POST \
            "https://api.sendgrid.com/v3/mail/send" \
            -H "Authorization: Bearer ${{ secrets.SENDGRID_API_KEY }}" \
            -H "Content-Type: application/json" \
            -d '{
              "personalizations": [
                {
                  "to": [{"email": "${{ secrets.NOTIFICATION_EMAIL }}"}],
                  "subject": "Resultado del despliegue: ${{ job.status }}"
                }
              ],
              "from": {"email": "noreply@miempresa.com"},
              "content": [
                {
                  "type": "text/plain",
                  "value": "El despliegue de Miel Dorada ha ${{ job.status }}\n\nDetalles:\n- Repositorio: ${{ github.repository }}\n- Rama: ${{ github.ref }}\n- Ejecuci√≥n: ${{ github.run_id }}\n\nVer detalles: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
                }
              ]
            }'

      - name: Send Teams Notification
        if: always()
        uses: aliencube/microsoft-teams-actions@v0.9.1
        with:
          webhook_uri: ${{ secrets.TEAMS_WEBHOOK_URI }}
          status: ${{ job.status }}
          title: "Despliegue Miel Dorada"
          summary: "Resultado del despliegue"
          text: |
            **Estado:** ${{ job.status }}
            **Repositorio:** ${{ github.repository }}
            **Rama:** ${{ github.ref }}
            **Ejecuci√≥n:** [#${{ github.run_number }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
            **Hora:** ${{ github.run_attempt }}
          theme_color: ${{ job.status == 'success' && '2EB886' || 'A30200' }}