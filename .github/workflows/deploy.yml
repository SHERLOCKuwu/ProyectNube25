name: CI/CD Miel Dorada

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  PORT: 3001
  NODE_ENV: ci
  NEW_RELIC_NO_CONFIG_FILE: true

jobs:
  test-and-build:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Cache node modules
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: ${{ runner.os }}-node-

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18.x'
          cache: 'npm'

      - name: Install dependencies
        env:
          NEW_RELIC_APP_NAME: "ProyectNube25-Install"
          NEW_RELIC_LICENSE_KEY: ${{ secrets.NEW_RELIC_LICENSE_KEY }}
        run: |
          npm ci
          npm audit fix --force

      - name: Configure environment
        run: |
          if [ "${{ github.ref }}" == "refs/heads/main" ]; then
            echo "ENV=Prod" >> $GITHUB_ENV
            echo "NEW_RELIC_LOG_LEVEL=info" >> $GITHUB_ENV
          else
            echo "ENV=Dev" >> $GITHUB_ENV
            echo "NEW_RELIC_LOG_LEVEL=trace" >> $GITHUB_ENV
          fi
          echo "NEW_RELIC_APP_NAME=ProyectNube25-${{ env.ENV }}" >> $GITHUB_ENV

      - name: Install required tools
        run: |
          sudo apt-get update
          sudo apt-get install -y jq

      - name: Run Backend Tests
        env:
          DB_URL: ${{ secrets.DB_URL }}
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
        run: |
          if [ -f "Backend/test/*.test.js" ]; then
            npm test
          else
            echo "⚠️ No hay tests - Continuando..."
          fi

      - name: Prepare Frontend
        run: |
          cd Frontend
          mkdir -p dist
          [ -d "paginas" ] && cp -r paginas/*.html dist/ || cp -r *.html dist/ || echo "⚠️ No hay HTML"
          for folder in estilos css js imagenes; do
            [ -d "$folder" ] && cp -r "$folder" dist/
          done

      - name: Configure New Relic Frontend
        run: |
          if [ -d "Frontend/dist" ]; then
            # HTML
            find Frontend/dist -name '*.html' -print0 | xargs -0 sed -i "/<head>/a <script>window.NREUM||(NREUM={});NREUM.info={applicationID:'${{ secrets.NEW_RELIC_BROWSER_APP_ID }}',licenseKey:'${{ secrets.NEW_RELIC_BROWSER_KEY }}',env:'${{ env.ENV }}'}</script>"
            
            # JavaScript
            find Frontend/dist -name '*.js' -print0 | xargs -0 sed -i "1i //@newrelic"
          fi

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: production-files
          path: |
            Backend/
            Frontend/dist/
            package.json

      - name: Deploy via Railway API
        env:
          NEW_RELIC_LICENSE_KEY: ${{ secrets.NEW_RELIC_LICENSE_KEY }}
          NEW_RELIC_APP_NAME: ${{ env.NEW_RELIC_APP_NAME }}
        run: |
          curl -X POST "https://api.railway.app/v1/projects/${{ secrets.RAILWAY_PROJECT_ID }}/deployments" \
            -H "Authorization: Bearer ${{ secrets.RAILWAY_TOKEN }}" \
            -H "Content-Type: application/json" \
            -d '{
              "serviceId": "backend",
              "variables": {
                "NEW_RELIC_LICENSE_KEY": "'"$NEW_RELIC_LICENSE_KEY"'",
                "NEW_RELIC_APP_NAME": "'"$NEW_RELIC_APP_NAME"'",
                "DB_URL": "'"${{ secrets.DB_URL }}"'",
                "NODE_ENV": "production"
              }
            }'

      - name: Send Teams Notification
        if: always()
        env:
          REPO_NAME: ${{ github.repository }}
          RUN_URL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            COLOR="2EB886"
            EMOJI="✅"
            STATUS_TEXT="ÉXITO"
          else
            COLOR="A30200"
            EMOJI="❌"
            STATUS_TEXT="FALLO"
          fi

          curl -X POST \
            "${{ secrets.TEAMS_WEBHOOK_URI }}" \
            -H "Content-Type: application/json" \
            -d '{
              "@type": "MessageCard",
              "@context": "http://schema.org/extensions",
              "themeColor": "'"$COLOR"'",
              "title": "'"$EMOJI Despliegue $REPO_NAME - $STATUS_TEXT $EMOJI"'",
              "text": "**Estado:** '"$STATUS_TEXT"'\n\n**Repositorio:** '"$REPO_NAME"'\n\n**Ejecución:** [Ver detalles]('"$RUN_URL"')",
              "potentialAction": [{
                "@type": "OpenUri",
                "name": "Ver detalles del despliegue",
                "targets": [{
                  "os": "default",
                  "uri": "'"$RUN_URL"'"
                }]
              }]
            }'